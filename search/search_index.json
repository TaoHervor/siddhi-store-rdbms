{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-store-rdbms\n\n\nThe \nsiddhi-store-rdbms extension\n is an extension to \nSiddhi\n that  can be used to persist events to an RDBMS instance of the user's choice.\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n5.1.4\n.\n\n\nPrerequisites\n\n\n\n\nA RDBMS server instance should be started.\n\n\nThe user should have the necessary privileges and access rights to connect to the RDBMS data store of choice.\n\n\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.store.rdbms\n/groupId\n\n        \nartifactId\nsiddhi-store-rdbms\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\n\nNote\n : rdbms:query() and rdbms:cud() function will work only in WSO2 Stream Processor. \n\n\nRunning Integration tests in docker containers(Optional)\n\n\nThe RDBMS functionality are tested with the docker base integration test framework, except the H2 default \nembedded database is not uses external docker container. The test framework initialize the docker container for each \ndatabase according to the given profile before execute the test suit.\n\n\nStart integration tests\n\n\n\n\n\n\nInstall and run docker in daemon mode.\n\n\n\n\n\n\nInstalling docker on Linux,\n\n   Note:\n    These commands retrieve content from get.docker.com web in a quiet output-document mode and install.Then we need to stop docker service as it needs to restart docker in daemon mode. After that, we need to export docker daemon host.\n\n\nwget -qO- https://get.docker.com/ | sh\nsudo service dockerd stop\nexport DOCKER_HOST=tcp://172.17.0.1:4326\ndocker daemon -H tcp://172.17.0.1:4326\n\n\n\n\n\n\n\n\n\nOn installing docker on Mac, see \nGet started with Docker for Mac\n\n\n\n\n\n\nOn installing docker on Windows, see \nGet started with Docker for Windows\n\n\n\n\n\n\n\n\n\n\nTo run the integration test, navigate to the siddhi-store-rdbms/ directory and issue the following commands.\n\n\n\n\n\n\nH2 default:\n\n\nmvn clean install\n\n\n\n\n\nNote\n : h2 is the default activated profile as it is not used docker.\n\n\n\n\n\n\nMySQL 5.7:\n\n\nmvn verify -P local-mysql -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true\n\n\n\n\n\n\n\n\n\nPostgres 9.6:\n\n\n mvn verify -P local-postgres -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true\n\n\n\n\n\n\n\n\n\nMSSQL CTP 2.0:\n\n\nmvn verify -P local-mssql -f /component/pom.xml -Dskip.surefire.test=true\n\n\n\n\n\n\n\n\n\nOracle 11.2.0.2 Express Edition:\n\n\n mvn verify -P local-oracle -f /component/pom.xml -Dskip.surefire.test=true\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo run the integration test with DB2, issue the following commands:\n\n\n\n\n\n\nDownload DB2 driver version 4.19.26 \ndb2jcc4.jar\n\n\n\n\n\n\nTo install the JAR file as a Maven plugin, issue the following command:\n\n\n mvn install:install-file -Dfile=/tmp/db2jcc4.jar -DgroupId=com.ibm.db2 -DartifactId=db2jcc -Dversion=4.19.26 -Dpackaging=jar\n\n\n\n\n\n\n\n\n\nUncomment the following test dependency in the /component/pom.xml file as shown below:\n\n\n \ndependency\n\n   \ngroupId\ncom.ibm.db2\n/groupId\n\n   \nartifactId\ndb2jcc\n/artifactId\n\n   \nscope\ntest\n/scope\n\n   \nversion\n4.19.26\n/version\n\n \n/dependency\n\n\n\n\n\n\n\n\n\n\nTo run the integration test, navigate to siddhi-store-rdbms/ directory and issue the following commands:\n\n\n mvn verify -P local-db2 -f /component/pom.xml -Dskip.surefire.test=true\n\n\n\n\n\n\n\n\n\n\n\n\n\nStart integration tests in debug mode\n\n\nmvn -P local-mysql -Dmaven.failsafe.debug verify\nNote: local-mysql is the profile. Use other profiles accordingly.\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\ncud\n \n(Stream Processor)\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\nquery\n \n(Stream Processor)\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\nrdbms\n \n(Store)\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-store-rdbms", 
            "text": "The  siddhi-store-rdbms extension  is an extension to  Siddhi  that  can be used to persist events to an RDBMS instance of the user's choice.\nFind some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-store-rdbms"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  5.1.4 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "A RDBMS server instance should be started.  The user should have the necessary privileges and access rights to connect to the RDBMS data store of choice.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.store.rdbms /groupId \n         artifactId siddhi-store-rdbms /artifactId \n         version x.x.x /version \n      /dependency   Note  : rdbms:query() and rdbms:cud() function will work only in WSO2 Stream Processor.", 
            "title": "How to use"
        }, 
        {
            "location": "/#running-integration-tests-in-docker-containersoptional", 
            "text": "The RDBMS functionality are tested with the docker base integration test framework, except the H2 default \nembedded database is not uses external docker container. The test framework initialize the docker container for each \ndatabase according to the given profile before execute the test suit.  Start integration tests    Install and run docker in daemon mode.    Installing docker on Linux, \n   Note:     These commands retrieve content from get.docker.com web in a quiet output-document mode and install.Then we need to stop docker service as it needs to restart docker in daemon mode. After that, we need to export docker daemon host.  wget -qO- https://get.docker.com/ | sh\nsudo service dockerd stop\nexport DOCKER_HOST=tcp://172.17.0.1:4326\ndocker daemon -H tcp://172.17.0.1:4326    On installing docker on Mac, see  Get started with Docker for Mac    On installing docker on Windows, see  Get started with Docker for Windows      To run the integration test, navigate to the siddhi-store-rdbms/ directory and issue the following commands.    H2 default:  mvn clean install  Note  : h2 is the default activated profile as it is not used docker.    MySQL 5.7:  mvn verify -P local-mysql -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true    Postgres 9.6:   mvn verify -P local-postgres -f /component/pom.xml -Dskip.surefire.test=true -Ddocker.removeVolumes=true    MSSQL CTP 2.0:  mvn verify -P local-mssql -f /component/pom.xml -Dskip.surefire.test=true    Oracle 11.2.0.2 Express Edition:   mvn verify -P local-oracle -f /component/pom.xml -Dskip.surefire.test=true      To run the integration test with DB2, issue the following commands:    Download DB2 driver version 4.19.26  db2jcc4.jar    To install the JAR file as a Maven plugin, issue the following command:   mvn install:install-file -Dfile=/tmp/db2jcc4.jar -DgroupId=com.ibm.db2 -DartifactId=db2jcc -Dversion=4.19.26 -Dpackaging=jar    Uncomment the following test dependency in the /component/pom.xml file as shown below:    dependency \n    groupId com.ibm.db2 /groupId \n    artifactId db2jcc /artifactId \n    scope test /scope \n    version 4.19.26 /version \n  /dependency     To run the integration test, navigate to siddhi-store-rdbms/ directory and issue the following commands:   mvn verify -P local-db2 -f /component/pom.xml -Dskip.surefire.test=true      Start integration tests in debug mode  mvn -P local-mysql -Dmaven.failsafe.debug verify\nNote: local-mysql is the profile. Use other profiles accordingly.", 
            "title": "Running Integration tests in docker containers(Optional)"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "cud   (Stream Processor) This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  query   (Stream Processor) This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  rdbms   (Store) This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/5.1.4/", 
            "text": "API Docs - v5.1.4\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/stocks\n, username=\nroot\n, password=\nroot\n, jdbc.driver.name=\ncom.mysql.jdbc.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "5.1.4"
        }, 
        {
            "location": "/api/5.1.4/#api-docs-v514", 
            "text": "", 
            "title": "API Docs - v5.1.4"
        }, 
        {
            "location": "/api/5.1.4/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/5.1.4/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.4/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.4/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/5.1.4/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/5.1.3/", 
            "text": "API Docs - v5.1.3\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/stocks\n, username=\nroot\n, password=\nroot\n, jdbc.driver.name=\ncom.mysql.jdbc.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "5.1.3"
        }, 
        {
            "location": "/api/5.1.3/#api-docs-v513", 
            "text": "", 
            "title": "API Docs - v5.1.3"
        }, 
        {
            "location": "/api/5.1.3/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/5.1.3/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.3/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.3/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/5.1.3/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/5.1.2/", 
            "text": "API Docs - v5.1.2\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/stocks\n, username=\nroot\n, password=\nroot\n, jdbc.driver.name=\ncom.mysql.jdbc.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "5.1.2"
        }, 
        {
            "location": "/api/5.1.2/#api-docs-v512", 
            "text": "", 
            "title": "API Docs - v5.1.2"
        }, 
        {
            "location": "/api/5.1.2/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/5.1.2/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.2/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.2/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/5.1.2/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/5.1.1/", 
            "text": "API Docs - v5.1.1\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/stocks\n, username=\nroot\n, password=\nroot\n, jdbc.driver.name=\ncom.mysql.jdbc.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "5.1.1"
        }, 
        {
            "location": "/api/5.1.1/#api-docs-v511", 
            "text": "", 
            "title": "API Docs - v5.1.1"
        }, 
        {
            "location": "/api/5.1.1/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/5.1.1/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.1/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.1/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/5.1.1/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/5.1.0/", 
            "text": "API Docs - v5.1.0\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "5.1.0"
        }, 
        {
            "location": "/api/5.1.0/#api-docs-v510", 
            "text": "", 
            "title": "API Docs - v5.1.0"
        }, 
        {
            "location": "/api/5.1.0/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/5.1.0/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.0/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.0/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/5.1.0/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/5.0.0/", 
            "text": "API Docs - v5.0.0\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#api-docs-v500", 
            "text": "", 
            "title": "API Docs - v5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/5.0.0/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.0/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.0/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/5.0.0/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.51/", 
            "text": "API Docs - v4.0.51\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.51"
        }, 
        {
            "location": "/api/4.0.51/#api-docs-v4051", 
            "text": "", 
            "title": "API Docs - v4.0.51"
        }, 
        {
            "location": "/api/4.0.51/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.51/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.51/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.51/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.51/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.50/", 
            "text": "API Docs - v4.0.50\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.50"
        }, 
        {
            "location": "/api/4.0.50/#api-docs-v4050", 
            "text": "", 
            "title": "API Docs - v4.0.50"
        }, 
        {
            "location": "/api/4.0.50/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.50/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.50/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.50/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.50/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.49/", 
            "text": "API Docs - v4.0.49\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.49"
        }, 
        {
            "location": "/api/4.0.49/#api-docs-v4049", 
            "text": "", 
            "title": "API Docs - v4.0.49"
        }, 
        {
            "location": "/api/4.0.49/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.49/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.49/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.49/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.49/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.48/", 
            "text": "API Docs - v4.0.48\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.48"
        }, 
        {
            "location": "/api/4.0.48/#api-docs-v4048", 
            "text": "", 
            "title": "API Docs - v4.0.48"
        }, 
        {
            "location": "/api/4.0.48/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.48/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.48/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.48/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.48/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.47/", 
            "text": "API Docs - v4.0.47\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.47"
        }, 
        {
            "location": "/api/4.0.47/#api-docs-v4047", 
            "text": "", 
            "title": "API Docs - v4.0.47"
        }, 
        {
            "location": "/api/4.0.47/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.47/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.47/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.47/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.47/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.46/", 
            "text": "API Docs - v4.0.46\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.46"
        }, 
        {
            "location": "/api/4.0.46/#api-docs-v4046", 
            "text": "", 
            "title": "API Docs - v4.0.46"
        }, 
        {
            "location": "/api/4.0.46/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.46/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.46/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.46/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.46/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.45/", 
            "text": "API Docs - v4.0.45\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.45"
        }, 
        {
            "location": "/api/4.0.45/#api-docs-v4045", 
            "text": "", 
            "title": "API Docs - v4.0.45"
        }, 
        {
            "location": "/api/4.0.45/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.45/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.45/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.45/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.45/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.44/", 
            "text": "API Docs - v4.0.44\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.44"
        }, 
        {
            "location": "/api/4.0.44/#api-docs-v4044", 
            "text": "", 
            "title": "API Docs - v4.0.44"
        }, 
        {
            "location": "/api/4.0.44/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.44/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.44/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.44/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.44/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.43/", 
            "text": "API Docs - v4.0.43\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.43"
        }, 
        {
            "location": "/api/4.0.43/#api-docs-v4043", 
            "text": "", 
            "title": "API Docs - v4.0.43"
        }, 
        {
            "location": "/api/4.0.43/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.43/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.43/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.43/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.43/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.42/", 
            "text": "API Docs - v4.0.42\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.42"
        }, 
        {
            "location": "/api/4.0.42/#api-docs-v4042", 
            "text": "", 
            "title": "API Docs - v4.0.42"
        }, 
        {
            "location": "/api/4.0.42/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.42/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.42/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.42/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.42/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.41/", 
            "text": "API Docs - v4.0.41\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.41"
        }, 
        {
            "location": "/api/4.0.41/#api-docs-v4041", 
            "text": "", 
            "title": "API Docs - v4.0.41"
        }, 
        {
            "location": "/api/4.0.41/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.41/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.41/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.41/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.41/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.40/", 
            "text": "API Docs - v4.0.40\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.40"
        }, 
        {
            "location": "/api/4.0.40/#api-docs-v4040", 
            "text": "", 
            "title": "API Docs - v4.0.40"
        }, 
        {
            "location": "/api/4.0.40/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.40/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.40/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.40/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.40/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.39/", 
            "text": "API Docs - v4.0.39\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.39"
        }, 
        {
            "location": "/api/4.0.39/#api-docs-v4039", 
            "text": "", 
            "title": "API Docs - v4.0.39"
        }, 
        {
            "location": "/api/4.0.39/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.39/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.39/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.39/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.39/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.38/", 
            "text": "API Docs - v4.0.38\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.38"
        }, 
        {
            "location": "/api/4.0.38/#api-docs-v4038", 
            "text": "", 
            "title": "API Docs - v4.0.38"
        }, 
        {
            "location": "/api/4.0.38/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.38/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.38/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.38/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.38/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.37/", 
            "text": "API Docs - v4.0.37\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.37"
        }, 
        {
            "location": "/api/4.0.37/#api-docs-v4037", 
            "text": "", 
            "title": "API Docs - v4.0.37"
        }, 
        {
            "location": "/api/4.0.37/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.37/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.37/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.37/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.37/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.36/", 
            "text": "API Docs - v4.0.36\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.36"
        }, 
        {
            "location": "/api/4.0.36/#api-docs-v4036", 
            "text": "", 
            "title": "API Docs - v4.0.36"
        }, 
        {
            "location": "/api/4.0.36/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.36/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.36/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.36/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.36/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.35/", 
            "text": "API Docs - v4.0.35\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.35"
        }, 
        {
            "location": "/api/4.0.35/#api-docs-v4035", 
            "text": "", 
            "title": "API Docs - v4.0.35"
        }, 
        {
            "location": "/api/4.0.35/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.35/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.35/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.35/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.35/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.34/", 
            "text": "API Docs - v4.0.34\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.34"
        }, 
        {
            "location": "/api/4.0.34/#api-docs-v4034", 
            "text": "", 
            "title": "API Docs - v4.0.34"
        }, 
        {
            "location": "/api/4.0.34/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.34/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.34/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.34/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.34/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.33/", 
            "text": "API Docs - v4.0.33\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.33"
        }, 
        {
            "location": "/api/4.0.33/#api-docs-v4033", 
            "text": "", 
            "title": "API Docs - v4.0.33"
        }, 
        {
            "location": "/api/4.0.33/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.33/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.33/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.33/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.33/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.32/", 
            "text": "API Docs - v4.0.32\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.32"
        }, 
        {
            "location": "/api/4.0.32/#api-docs-v4032", 
            "text": "", 
            "title": "API Docs - v4.0.32"
        }, 
        {
            "location": "/api/4.0.32/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.32/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.32/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.32/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.32/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.31/", 
            "text": "API Docs - v4.0.31\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.31"
        }, 
        {
            "location": "/api/4.0.31/#api-docs-v4031", 
            "text": "", 
            "title": "API Docs - v4.0.31"
        }, 
        {
            "location": "/api/4.0.31/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.31/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.31/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.31/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.31/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.30/", 
            "text": "API Docs - v4.0.30\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.30"
        }, 
        {
            "location": "/api/4.0.30/#api-docs-v4030", 
            "text": "", 
            "title": "API Docs - v4.0.30"
        }, 
        {
            "location": "/api/4.0.30/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.30/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.30/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.30/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.30/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.29/", 
            "text": "API Docs - v4.0.29\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. Each required field must be provided as a key value pair in the form of \nfield.name\n:\nlength\n and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.29"
        }, 
        {
            "location": "/api/4.0.29/#api-docs-v4029", 
            "text": "", 
            "title": "API Docs - v4.0.29"
        }, 
        {
            "location": "/api/4.0.29/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.29/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.29/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.29/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.29/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. Each required field must be provided as a key value pair in the form of  field.name : length  and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.28/", 
            "text": "API Docs - v4.0.28\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. Each required field must be provided as a key value pair in the form of \nfield.name\n:\nlength\n and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.28"
        }, 
        {
            "location": "/api/4.0.28/#api-docs-v4028", 
            "text": "", 
            "title": "API Docs - v4.0.28"
        }, 
        {
            "location": "/api/4.0.28/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.28/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.28/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.28/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.28/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. Each required field must be provided as a key value pair in the form of  field.name : length  and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.27/", 
            "text": "API Docs - v4.0.27\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. Each required field must be provided as a key value pair in the form of \nfield.name\n:\nlength\n and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "4.0.27"
        }, 
        {
            "location": "/api/4.0.27/#api-docs-v4027", 
            "text": "", 
            "title": "API Docs - v4.0.27"
        }, 
        {
            "location": "/api/4.0.27/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.27/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.27/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.27/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.27/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. Each required field must be provided as a key value pair in the form of  field.name : length  and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). Then the table is join with the InputStream based on a condition. In the on condition following operations are supported [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.26/", 
            "text": "API Docs - v4.0.26\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. Each required field must be provided as a key value pair in the form of \nfield.name\n:\nlength\n and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.26"
        }, 
        {
            "location": "/api/4.0.26/#api-docs-v4026", 
            "text": "", 
            "title": "API Docs - v4.0.26"
        }, 
        {
            "location": "/api/4.0.26/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.26/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.26/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.26/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.26/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. Each required field must be provided as a key value pair in the form of  field.name : length  and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.25/", 
            "text": "API Docs - v4.0.25\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. Each required field must be provided as a key value pair in the form of \nfield.name\n:\nlength\n and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.25"
        }, 
        {
            "location": "/api/4.0.25/#api-docs-v4025", 
            "text": "", 
            "title": "API Docs - v4.0.25"
        }, 
        {
            "location": "/api/4.0.25/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.25/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.25/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.25/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.25/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. Each required field must be provided as a key value pair in the form of  field.name : length  and separated by commas for each field. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.24/", 
            "text": "API Docs - v4.0.24\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.24"
        }, 
        {
            "location": "/api/4.0.24/#api-docs-v4024", 
            "text": "", 
            "title": "API Docs - v4.0.24"
        }, 
        {
            "location": "/api/4.0.24/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.24/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.24/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.24/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.24/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.23/", 
            "text": "API Docs - v4.0.23\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.23"
        }, 
        {
            "location": "/api/4.0.23/#api-docs-v4023", 
            "text": "", 
            "title": "API Docs - v4.0.23"
        }, 
        {
            "location": "/api/4.0.23/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.23/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.23/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.23/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.23/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.22/", 
            "text": "API Docs - v4.0.22\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThe function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nEnable/Disable performing CUD operations through rdbms cud function\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  recordStream;\n\n\n\n\n\nEvents will be modified with additional attribute of name 'numRecords' with the number of records manipulated.\n\n\n\nquery \n(Stream Processor)\n\n\nThe function can be used to perform SQL retrieval queries on a WSO2 datasource. \nNote: This will only work within WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource on which the query should be performed on\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the appropriate database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nComma separated list of \nAttributeName AttributeType\n. It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n. \nMapping of the Siddhi data type to database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.22"
        }, 
        {
            "location": "/api/4.0.22/#api-docs-v4022", 
            "text": "", 
            "title": "API Docs - v4.0.22"
        }, 
        {
            "location": "/api/4.0.22/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/4.0.22/#cud-stream-processor", 
            "text": "The function can be used to perform SQL CUD (INSERT, UPDATE, DELETE) queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the appropriate database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         Enable/Disable performing CUD operations through rdbms cud function \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  recordStream;  Events will be modified with additional attribute of name 'numRecords' with the number of records manipulated.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.22/#query-stream-processor", 
            "text": "The function can be used to perform SQL retrieval queries on a WSO2 datasource.  Note: This will only work within WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource on which the query should be performed on \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the appropriate database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         Comma separated list of  AttributeName AttributeType . It is expected that the SQL query will return the attributes in order, as in if one attribute is defined here, the SQL query should return one column result set, if more than one column is returned then the first column will be processed. The Siddhi data types supported will be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL .  Mapping of the Siddhi data type to database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.22/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.22/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.21/", 
            "text": "API Docs - v4.0.21\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.21"
        }, 
        {
            "location": "/api/4.0.21/#api-docs-v4021", 
            "text": "", 
            "title": "API Docs - v4.0.21"
        }, 
        {
            "location": "/api/4.0.21/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.21/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.20/", 
            "text": "API Docs - v4.0.20\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.20"
        }, 
        {
            "location": "/api/4.0.20/#api-docs-v4020", 
            "text": "", 
            "title": "API Docs - v4.0.20"
        }, 
        {
            "location": "/api/4.0.20/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.20/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.19/", 
            "text": "API Docs - v4.0.19\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.19"
        }, 
        {
            "location": "/api/4.0.19/#api-docs-v4019", 
            "text": "", 
            "title": "API Docs - v4.0.19"
        }, 
        {
            "location": "/api/4.0.19/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.19/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.18/", 
            "text": "API Docs - v4.0.18\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.18"
        }, 
        {
            "location": "/api/4.0.18/#api-docs-v4018", 
            "text": "", 
            "title": "API Docs - v4.0.18"
        }, 
        {
            "location": "/api/4.0.18/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.18/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.17/", 
            "text": "API Docs - v4.0.17\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#api-docs-v4017", 
            "text": "", 
            "title": "API Docs - v4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.17/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.16/", 
            "text": "API Docs - v4.0.16\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#api-docs-v4016", 
            "text": "", 
            "title": "API Docs - v4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.16/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.15/", 
            "text": "API Docs - v4.0.15\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#api-docs-v4015", 
            "text": "", 
            "title": "API Docs - v4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.15/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.14/", 
            "text": "API Docs - v4.0.14\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#api-docs-v4014", 
            "text": "", 
            "title": "API Docs - v4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.14/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.13/", 
            "text": "API Docs - v4.0.13\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#api-docs-v4013", 
            "text": "", 
            "title": "API Docs - v4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.13/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.12/", 
            "text": "API Docs - v4.0.12\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.12/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.11/", 
            "text": "API Docs - v4.0.11\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#api-docs-v4011", 
            "text": "", 
            "title": "API Docs - v4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.11/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.10/", 
            "text": "API Docs - v4.0.10\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#api-docs-v4010", 
            "text": "", 
            "title": "API Docs - v4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.10/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.9/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.8/", 
            "text": "API Docs - v4.0.8\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#api-docs-v408", 
            "text": "", 
            "title": "API Docs - v4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.8/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource which should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are not taken into account, and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.7/", 
            "text": "API Docs - v4.0.7\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#api-docs-v407", 
            "text": "", 
            "title": "API Docs - v4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.7/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.6/", 
            "text": "API Docs - v4.0.6\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#api-docs-v406", 
            "text": "", 
            "title": "API Docs - v4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.6/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.5/", 
            "text": "API Docs - v4.0.5\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether or not the JDBC connection that is used supports JDBC transactions.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#api-docs-v405", 
            "text": "", 
            "title": "API Docs - v4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.5/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether or not the JDBC connection that is used supports JDBC transactions. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.4/", 
            "text": "API Docs - v4.0.4\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.*\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.4"
        }, 
        {
            "location": "/api/4.0.4/#api-docs-v404", 
            "text": "", 
            "title": "API Docs - v4.0.4"
        }, 
        {
            "location": "/api/4.0.4/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.4/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.3/", 
            "text": "API Docs - v4.0.3\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.*\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.3"
        }, 
        {
            "location": "/api/4.0.3/#api-docs-v403", 
            "text": "", 
            "title": "API Docs - v4.0.3"
        }, 
        {
            "location": "/api/4.0.3/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.3/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.2/", 
            "text": "API Docs - v4.0.2\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.*\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.2"
        }, 
        {
            "location": "/api/4.0.2/#api-docs-v402", 
            "text": "", 
            "title": "API Docs - v4.0.2"
        }, 
        {
            "location": "/api/4.0.2/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.2/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/4.0.1/", 
            "text": "API Docs - v4.0.1\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the \nSTRING\n type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the \ncheck table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the \ncreate table\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the \ncreate index\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the \ninsert record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the \nupdate record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the \nselect record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the \ncheck record existence\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the \ndelete record\n operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether \nUpdate\n and \nInsert\n operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.*\n: true\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)@Index(\nvolume\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named \nStockTable\n on the DB if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a DB index is created for it.", 
            "title": "4.0.1"
        }, 
        {
            "location": "/api/4.0.1/#api-docs-v401", 
            "text": "", 
            "title": "API Docs - v4.0.1"
        }, 
        {
            "location": "/api/4.0.1/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/4.0.1/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read write operations on connected datasources  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account, and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the  STRING  type in the table definition must contain. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the  check table  operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the  create table  operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the  create index  operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the  insert record  operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the  update record  operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the  select record  operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the  check record existence  operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the  delete record  operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether  Update  and  Insert  operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2.* : true \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )@Index( volume )define table StockTable (symbol string, price float, volume long);  The above example creates an event table named  StockTable  on the DB if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a DB index is created for it.", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v5.1.4\n\n\nRdbms\n\n\ncud \n(Stream Processor)\n\n\nThis function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:cud(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe update, delete, or insert query(formatted according to the relevant database type) that needs to be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nperform.CUD.operations\n\n        \nIf this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations.\n\n        \nfalse\n\n        \ntrue\nfalse\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nnumRecords\n\n        \nThe number of records manipulated by the query.\n\n        \nINT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=\nabc\n where customerName=\nxyz\n) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:cud(\nSAMPLE_DB\n, \nUPDATE Customers_Table SET customerName=? where customerName=?\n, changedName, previousName) \nselect numRecords \ninsert into  RecordStream;\n\n\n\n\n\nThis query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.\n\n\n\nquery \n(Stream Processor)\n\n\nThis function performs SQL retrieval queries on WSO2 datasources. \nNote: This function is only available when running Siddhi with WSO2 SP.\n\n\n\nSyntax\n\n\nrdbms:query(\nSTRING\n datasource.name, \nSTRING\n query, \nSTRING\n parameter.n, \nSTRING\n attribute.definition.list)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nThe name of the WSO2 datasource for which the query should be performed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nThe select query(formatted according to the relevant database type) that needs to be performed\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nparameter.n\n\n        \nIf the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute.definition.list\n\n        \nThis is provided as a comma-separated list in the '\nAttributeName AttributeType\n' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'. \nMapping of the Siddhi data type to the database data type can be done as follows, \nSiddhi Datatype\n-\nDatasource Datatype\nSTRING\n-\nCHAR\n,\nVARCHAR\n,\nLONGVARCHAR\nINT\n-\nINTEGER\nLONG\n-\nBIGINT\nDOUBLE\n-\nDOUBLE\nFLOAT\n-\nREAL\nBOOL\n-\nBIT\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nattributeName\n\n        \nThe return attributes will be the ones defined in the parameter\nattribute.definition.list\n.\n\n        \nSTRING\nINT\nLONG\nDOUBLE\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from Transactions_Table\n, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount).\n\n\n\nEXAMPLE 2\n\n\nfrom TriggerStream#rdbms:query(\nSAMPLE_DB\n, \nselect * from where country=? \n, countrySearchWord, \ncreditcardno string, country string, transaction string, amount int\n) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;\n\n\n\n\n\nEvents inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the \nattribute.definition.list\n(creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.\n\n\n\nStore\n\n\nrdbms \n(Store)\n\n\nThis extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.\n\n\n\nSyntax\n\n\n@Store(type=\nrdbms\n, jdbc.url=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, jdbc.driver.name=\nSTRING\n, pool.properties=\nSTRING\n, jndi.resource=\nSTRING\n, datasource=\nSTRING\n, table.name=\nSTRING\n, field.length=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njdbc.url\n\n        \nThe JDBC URL via which the RDBMS data store is accessed.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password to be used to access the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the RDBMS data store.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njndi.resource\n\n        \nThe name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource\n\n        \nThe name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nThe name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfield.length\n\n        \nThe number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the '\nfield.name\n:\nlength\n' format. If this is not specified, the default number of characters specific to the database type is considered.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.maxVersion\n\n        \nThe latest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.minVersion\n\n        \nThe earliest version supported for {{RDBMS-Name}}.\n\n        \n0\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCheckQuery\n\n        \nThe template query for the 'check table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMySQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nOracle\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nMicrosoft SQL Server\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nPostgreSQL\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\nDB2.\n: CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.tableCreateQuery\n\n        \nThe template query for the 'create table' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nOracle\n: SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1\nMicrosoft SQL Server\n: SELECT TOP 1 1 from {{TABLE_NAME}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.indexCreateQuery\n\n        \nThe template query for the 'create index' operation in {{RDBMS-Name}}.\n\n        \nH2\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMySQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nOracle\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nMicrosoft SQL Server\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nPostgreSQL\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\nDB2.\n: CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordInsertQuery\n\n        \nThe template query for the 'insert record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMySQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nOracle\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nMicrosoft SQL Server\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nPostgreSQL\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\nDB2.\n: INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}})\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordUpdateQuery\n\n        \nThe template query for the 'update record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMySQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nOracle\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nMicrosoft SQL Server\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nPostgreSQL\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\nDB2.\n: UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordSelectQuery\n\n        \nThe template query for the 'select record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: SELECT * FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordExistsQuery\n\n        \nThe template query for the 'check record existence' operation in {{RDBMS-Name}}.\n\n        \nH2\n: SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1\nDB2.\n: SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.recordDeleteQuery\n\n        \nThe query for the 'delete record' operation in {{RDBMS-Name}}.\n\n        \nH2\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMySQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nOracle\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nMicrosoft SQL Server\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nPostgreSQL\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\nDB2.\n: DELETE FROM {{TABLE_NAME}} {{CONDITION}}\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.stringSize\n\n        \nThis defines the length for the string fields in {{RDBMS-Name}}.\n\n        \nH2\n: 254\nMySQL\n: 254\nOracle\n: 254\nMicrosoft SQL Server\n: 254\nPostgreSQL\n: 254\nDB2.\n: 254\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.fieldSizeLimit\n\n        \nThis defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: 2000\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.\n: N/A\n\n        \n0 =\n n =\n INT_MAX\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchSize\n\n        \nThis defines the batch size when operations are performed for batches of events.\n\n        \nH2\n: 1000\nMySQL\n: 1000\nOracle\n: 1000\nMicrosoft SQL Server\n: 1000\nPostgreSQL\n: 1000\nDB2.\n: 1000\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.batchEnable\n\n        \nThis specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle (versions 12.0 and less)\n: false\nOracle (versions 12.1 and above)\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.transactionSupported\n\n        \nThis is used to specify whether the JDBC connection that is used supports JDBC transactions or not.\n\n        \nH2\n: true\nMySQL\n: true\nOracle\n: true\nMicrosoft SQL Server\n: true\nPostgreSQL\n: true\nDB2.\n: true\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.binaryType\n\n        \nThis is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BLOB\nMySQL\n: BLOB\nOracle\n: BLOB\nMicrosoft SQL Server\n: VARBINARY(max)\nPostgreSQL\n: BYTEA\nDB2.\n: BLOB(64000)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.booleanType\n\n        \nThis is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: TINYINT(1)\nMySQL\n: TINYINT(1)\nOracle\n: NUMBER(1)\nMicrosoft SQL Server\n: BIT\nPostgreSQL\n: BOOLEAN\nDB2.\n: SMALLINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.doubleType\n\n        \nThis is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: DOUBLE\nMySQL\n: DOUBLE\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: FLOAT(32)\nPostgreSQL\n: DOUBLE PRECISION\nDB2.\n: DOUBLE\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.floatType\n\n        \nThis is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: FLOAT\nMySQL\n: FLOAT\nOracle\n: NUMBER(19,4)\nMicrosoft SQL Server\n: REAL\nPostgreSQL\n: REAL\nDB2.\n: REAL\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.integerType\n\n        \nThis is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: INTEGER\nMySQL\n: INTEGER\nOracle\n: NUMBER(10)\nMicrosoft SQL Server\n: INTEGER\nPostgreSQL\n: INTEGER\nDB2.\n: INTEGER\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.longType\n\n        \nThis is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: BIGINT\nMySQL\n: BIGINT\nOracle\n: NUMBER(19)\nMicrosoft SQL Server\n: BIGINT\nPostgreSQL\n: BIGINT\nDB2.\n: BIGINT\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.stringType\n\n        \nThis is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type.\n\n        \nH2\n: VARCHAR(stringSize)\nMySQL\n: VARCHAR(stringSize)\nOracle\n: VARCHAR(stringSize)\nMicrosoft SQL Server\n: VARCHAR(stringSize)\nPostgreSQL\n: VARCHAR(stringSize)\nDB2.\n: VARCHAR(stringSize)\n\n        \nN/A\n\n    \n\n    \n\n        \n{{RDBMS-Name}}.typeMapping.bigStringType\n\n        \nThis is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type.\n\n        \nH2\n: N/A\nMySQL\n: N/A\nOracle\n: CLOB\nMicrosoft SQL Server\n: N/A\nPostgreSQL\n: N/A\nDB2.*\n: N/A\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/stocks\n, username=\nroot\n, password=\nroot\n, jdbc.driver.name=\ncom.mysql.jdbc.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nvolume\n)\ndefine table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nrdbms\n, jdbc.url=\njdbc:mysql://localhost:3306/das\n, username=\nroot\n, password=\nroot\n , jdbc.driver.name=\norg.h2.Driver\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)\n@Index(\nsymbol\n)\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;\n\n\n\n\n\nThe above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition:\n[ AND, OR, Comparisons( \n  \n=  \n  \n=  == !=), IS NULL, NOT, str:contains(Table\nColumn\n, Stream\nAttribute\n or Search.String)]", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v514", 
            "text": "", 
            "title": "API Docs - v5.1.4"
        }, 
        {
            "location": "/api/latest/#rdbms", 
            "text": "", 
            "title": "Rdbms"
        }, 
        {
            "location": "/api/latest/#cud-stream-processor", 
            "text": "This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:cud( STRING  datasource.name,  STRING  query,  STRING  parameter.n)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         perform.CUD.operations \n         If this parameter is set to 'true', the RDBMS CUD function is enabled to perform CUD operations. \n         false \n         true false \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         numRecords \n         The number of records manipulated by the query. \n         INT \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName= abc  where customerName= xyz ) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'.  EXAMPLE 2  from TriggerStream#rdbms:cud( SAMPLE_DB ,  UPDATE Customers_Table SET customerName=? where customerName=? , changedName, previousName) \nselect numRecords \ninsert into  RecordStream;  This query updates the events from the input stream named 'TriggerStream' with an additional attribute named 'numRecords', of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named 'RecordStream'. Here the values of attributes changedName and previousName in the event will be set to the query.", 
            "title": "cud (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#query-stream-processor", 
            "text": "This function performs SQL retrieval queries on WSO2 datasources.  Note: This function is only available when running Siddhi with WSO2 SP.  Syntax  rdbms:query( STRING  datasource.name,  STRING  query,  STRING  parameter.n,  STRING  attribute.definition.list)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         datasource.name \n         The name of the WSO2 datasource for which the query should be performed. \n         \n         STRING \n         No \n         No \n     \n     \n         query \n         The select query(formatted according to the relevant database type) that needs to be performed \n         \n         STRING \n         No \n         No \n     \n     \n         parameter.n \n         If the second parameter is a parametrised SQL query, then siddhi attributes can be passed to set the values of the parameters \n         \n         STRING \n         No \n         No \n     \n     \n         attribute.definition.list \n         This is provided as a comma-separated list in the ' AttributeName AttributeType ' format. The SQL query is expected to return the attributes in the given order. e.g., If one attribute is defined here, the SQL query should return one column result set. If more than one column is returned, then the first column is processed. The Siddhi data types supported are 'STRING', 'INT', 'LONG', 'DOUBLE', 'FLOAT', and 'BOOL'.  Mapping of the Siddhi data type to the database data type can be done as follows,  Siddhi Datatype - Datasource Datatype STRING - CHAR , VARCHAR , LONGVARCHAR INT - INTEGER LONG - BIGINT DOUBLE - DOUBLE FLOAT - REAL BOOL - BIT \n         \n         STRING \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         attributeName \n         The return attributes will be the ones defined in the parameter attribute.definition.list . \n         STRING INT LONG DOUBLE FLOAT BOOL \n       Examples  EXAMPLE 1  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from Transactions_Table ,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount).  EXAMPLE 2  from TriggerStream#rdbms:query( SAMPLE_DB ,  select * from where country=?  , countrySearchWord,  creditcardno string, country string, transaction string, amount int ) \nselect creditcardno, country, transaction, amount \ninsert into recordStream;  Events inserted into recordStream includes all records matched for the query i.e an event will be generated for each record retrieved from the datasource. The event will include as additional attributes, the attributes defined in the  attribute.definition.list (creditcardno, country, transaction, amount). countrySearchWord value from the event will be set in the query when querying the datasource.", 
            "title": "query (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/latest/#rdbms-store", 
            "text": "This extension assigns data sources and connection instructions to event tables. It also implements read-write operations on connected datasources.  Syntax  @Store(type= rdbms , jdbc.url= STRING , username= STRING , password= STRING , jdbc.driver.name= STRING , pool.properties= STRING , jndi.resource= STRING , datasource= STRING , table.name= STRING , field.length= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         jdbc.url \n         The JDBC URL via which the RDBMS data store is accessed. \n         \n         STRING \n         No \n         No \n     \n     \n         username \n         The username to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         The password to be used to access the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the RDBMS data store. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         jndi.resource \n         The name of the JNDI resource through which the connection is attempted. If this is found, the pool properties described above are not taken into account and the connection is attempted via JNDI lookup instead. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         datasource \n         The name of the Carbon datasource that should be used for creating the connection with the database. If this is found, neither the pool properties nor the JNDI resource name described above are taken into account and the connection is attempted via Carbon datasources instead.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         The name with which the event table should be persisted in the store. If no name is specified via this parameter, the event table is persisted with the same name as the Siddhi table. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         field.length \n         The number of characters that the values for fields of the 'STRING' type in the table definition must contain. Each required field must be provided as a comma-separated list of key-value pairs in the ' field.name : length ' format. If this is not specified, the default number of characters specific to the database type is considered. \n         null \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         {{RDBMS-Name}}.maxVersion \n         The latest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.minVersion \n         The earliest version supported for {{RDBMS-Name}}. \n         0 \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCheckQuery \n         The template query for the 'check table' operation in {{RDBMS-Name}}. \n         H2 : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) MySQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Oracle : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) Microsoft SQL Server : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) PostgreSQL : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) DB2. : CREATE TABLE {{TABLE_NAME}} ({{COLUMNS, PRIMARY_KEYS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.tableCreateQuery \n         The template query for the 'create table' operation in {{RDBMS-Name}}. \n         H2 : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 MySQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 Oracle : SELECT 1 FROM {{TABLE_NAME}} WHERE rownum=1 Microsoft SQL Server : SELECT TOP 1 1 from {{TABLE_NAME}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.indexCreateQuery \n         The template query for the 'create index' operation in {{RDBMS-Name}}. \n         H2 : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) MySQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Oracle : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) Microsoft SQL Server : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) {{TABLE_NAME}} ({{INDEX_COLUMNS}}) PostgreSQL : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) DB2. : CREATE INDEX {{TABLE_NAME}}_INDEX ON {{TABLE_NAME}} ({{INDEX_COLUMNS}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordInsertQuery \n         The template query for the 'insert record' operation in {{RDBMS-Name}}. \n         H2 : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) MySQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Oracle : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) Microsoft SQL Server : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) PostgreSQL : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) DB2. : INSERT INTO {{TABLE_NAME}} ({{COLUMNS}}) VALUES ({{Q}}) \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordUpdateQuery \n         The template query for the 'update record' operation in {{RDBMS-Name}}. \n         H2 : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} MySQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Oracle : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} Microsoft SQL Server : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} PostgreSQL : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} DB2. : UPDATE {{TABLE_NAME}} SET {{COLUMNS_AND_VALUES}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordSelectQuery \n         The template query for the 'select record' operation in {{RDBMS-Name}}. \n         H2 : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} DB2. : SELECT * FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordExistsQuery \n         The template query for the 'check record existence' operation in {{RDBMS-Name}}. \n         H2 : SELECT TOP 1 1 FROM {{TABLE_NAME}} {{CONDITION}} MySQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} Oracle : SELECT COUNT(1) INTO existence FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : SELECT TOP 1 FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} LIMIT 1 DB2. : SELECT 1 FROM {{TABLE_NAME}} {{CONDITION}} FETCH FIRST 1 ROWS ONLY \n         N/A \n     \n     \n         {{RDBMS-Name}}.recordDeleteQuery \n         The query for the 'delete record' operation in {{RDBMS-Name}}. \n         H2 : DELETE FROM {{TABLE_NAME}} {{CONDITION}} MySQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Oracle : DELETE FROM {{TABLE_NAME}} {{CONDITION}} Microsoft SQL Server : DELETE FROM {{TABLE_NAME}} {{CONDITION}} PostgreSQL : DELETE FROM {{TABLE_NAME}} {{CONDITION}} DB2. : DELETE FROM {{TABLE_NAME}} {{CONDITION}} \n         N/A \n     \n     \n         {{RDBMS-Name}}.stringSize \n         This defines the length for the string fields in {{RDBMS-Name}}. \n         H2 : 254 MySQL : 254 Oracle : 254 Microsoft SQL Server : 254 PostgreSQL : 254 DB2. : 254 \n         N/A \n     \n     \n         {{RDBMS-Name}}.fieldSizeLimit \n         This defines the field size limit for select/switch to big string type from the default string type if the 'bigStringType' is available in field type list. \n         H2 : N/A MySQL : N/A Oracle : 2000 Microsoft SQL Server : N/A PostgreSQL : N/A DB2. : N/A \n         0 =  n =  INT_MAX \n     \n     \n         {{RDBMS-Name}}.batchSize \n         This defines the batch size when operations are performed for batches of events. \n         H2 : 1000 MySQL : 1000 Oracle : 1000 Microsoft SQL Server : 1000 PostgreSQL : 1000 DB2. : 1000 \n         N/A \n     \n     \n         {{RDBMS-Name}}.batchEnable \n         This specifies whether 'Update' and 'Insert' operations can be performed for batches of events or not. \n         H2 : true MySQL : true Oracle (versions 12.0 and less) : false Oracle (versions 12.1 and above) : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.transactionSupported \n         This is used to specify whether the JDBC connection that is used supports JDBC transactions or not. \n         H2 : true MySQL : true Oracle : true Microsoft SQL Server : true PostgreSQL : true DB2. : true \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.binaryType \n         This is used to specify the binary data type. An attribute defines as 'object' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BLOB MySQL : BLOB Oracle : BLOB Microsoft SQL Server : VARBINARY(max) PostgreSQL : BYTEA DB2. : BLOB(64000) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.booleanType \n         This is used to specify the boolean data type. An attribute defines as 'bool' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : TINYINT(1) MySQL : TINYINT(1) Oracle : NUMBER(1) Microsoft SQL Server : BIT PostgreSQL : BOOLEAN DB2. : SMALLINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.doubleType \n         This is used to specify the double data type. An attribute defines as 'double' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : DOUBLE MySQL : DOUBLE Oracle : NUMBER(19,4) Microsoft SQL Server : FLOAT(32) PostgreSQL : DOUBLE PRECISION DB2. : DOUBLE \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.floatType \n         This is used to specify the float data type. An attribute defines as 'float' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : FLOAT MySQL : FLOAT Oracle : NUMBER(19,4) Microsoft SQL Server : REAL PostgreSQL : REAL DB2. : REAL \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.integerType \n         This is used to specify the integer data type. An attribute defines as 'int' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : INTEGER MySQL : INTEGER Oracle : NUMBER(10) Microsoft SQL Server : INTEGER PostgreSQL : INTEGER DB2. : INTEGER \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.longType \n         This is used to specify the long data type. An attribute defines as 'long' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : BIGINT MySQL : BIGINT Oracle : NUMBER(19) Microsoft SQL Server : BIGINT PostgreSQL : BIGINT DB2. : BIGINT \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.stringType \n         This is used to specify the string data type. An attribute defines as 'string' type in Siddhi stream will be stored into RDBMS with this type. \n         H2 : VARCHAR(stringSize) MySQL : VARCHAR(stringSize) Oracle : VARCHAR(stringSize) Microsoft SQL Server : VARCHAR(stringSize) PostgreSQL : VARCHAR(stringSize) DB2. : VARCHAR(stringSize) \n         N/A \n     \n     \n         {{RDBMS-Name}}.typeMapping.bigStringType \n         This is used to specify the big string data type. An attribute defines as 'string' type in Siddhi stream and field.length define in the annotation is greater than the fieldSizeLimit, will be stored into RDBMS with this type. \n         H2 : N/A MySQL : N/A Oracle : CLOB Microsoft SQL Server : N/A PostgreSQL : N/A DB2.* : N/A \n         N/A \n       Examples  EXAMPLE 1  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/stocks , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( volume )\ndefine table StockTable (symbol string, price float, volume long);  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float', and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field, and a DB index is created for it.  EXAMPLE 2  @Store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/das , username= root , password= root  , jdbc.driver.name= org.h2.Driver ,field.length= symbol:100 )\n@PrimaryKey( symbol )\n@Index( symbol )\ndefine table StockTable (symbol string, price float, volume long);\ndefine stream InputStream (symbol string, volume long);\nfrom InputStream as a join StockTable as b on str:contains(b.symbol, a.symbol)\nselect a.symbol as symbol, b.volume as volume\ninsert into FooStream;  The above example creates an event table named 'StockTable' in the database if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). Then the table is joined with a stream named 'InputStream' based on a condition. The following operations are included in the condition: [ AND, OR, Comparisons(     =      =  == !=), IS NULL, NOT, str:contains(Table Column , Stream Attribute  or Search.String)]", 
            "title": "rdbms (Store)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}